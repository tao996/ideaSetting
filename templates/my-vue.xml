<templateSet group="my-vue">
  <template name="clearable" value="clearable" description="vant field clearable" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
  <template name="required" value="required" description="required" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
  <template name="placeholder" value="placeholder=&quot;$text$&quot;" description="placeholder" toReformat="false" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
  <template name="iivant" value="import { $vant$ } from 'vant';" description="import vant" toReformat="false" toShortenFQNames="true">
    <variable name="vant" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="iivuepage" value="&lt;template&gt;&#10;  &lt;div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script lang=&quot;ts&quot;&gt;&#10;&#10;import {&#10;  computed,&#10;  defineComponent,&#10;  PropType,&#10;  reactive,&#10;  ref,&#10;} from '@vue/runtime-core'&#10;&#10;export default defineComponent({&#10;  name:'$filename$',&#10;  components: {&#10;  },&#10;  props: {},&#10;  data() {&#10;    return {}&#10;  },&#10;  computed: {},&#10;  setup(props) {&#10;       return {}&#10;  },&#10;  methods: {},&#10;  mounted() {},&#10;})&#10;/*&#10;setup watch:&#10;watch(counter, (newValue, oldValue) =&gt; {&#10;  console.log('The new counter value is: ' + counter.value)&#10;})&#10;*/&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;&#10;&lt;/style&gt;&gt;&#10;" description="vue3 component" toReformat="false" toShortenFQNames="true">
    <variable name="filename" expression="" defaultValue="lowercaseAndDash(fileNameWithoutExtension())" alwaysStopAt="true" />
    <context>
      <option name="VUE_TOP_LEVEL" value="true" />
    </context>
  </template>
  <template name="vforindex" value="v-for=&quot;(row, index) of $data$&quot; :key=&quot;index&quot;" description="v-for=(e,index)" toReformat="false" toShortenFQNames="true">
    <variable name="data" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
  <template name="iivuex" value="const $name$ = {&#10;  namespaced: true,&#10;  state: {&#10;    &#10;  },&#10;  getters: {&#10;    &#10;  },&#10;  mutations: {&#10;    &#10;  },&#10;  actions: {&#10;    &#10;  }&#10;}&#10;&#10;export default $name$" description="create state" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="iiuse" value="Vue.use($name$);" description="vue use" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="vformap" value="v-for=&quot;(v, k) of $data$&quot; :key=&quot;k&quot;" description="vfor map" toReformat="false" toShortenFQNames="true">
    <variable name="data" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_INSIDE_TAG" value="true" />
    </context>
  </template>
</templateSet>